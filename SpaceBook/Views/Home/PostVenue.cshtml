@model SpaceBook.Models.Facility
@{
    ViewBag.Title = "PostVenue";
}

<h2>PostVenue</h2>
@using (Html.BeginForm("PostVenue", "Home", Model, FormMethod.Post, new { id = "postVenueForm"}))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Facility</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        @*<div class="input-group mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text"><i class="fa fa-building-o fa-fw"></i></span>
                </div>
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>*@
        <div class="row justify-content-center">
            <div class="col-md-8">
                <div class="card text-center">
                    <div class="card-header">
                        Featured
                    </div>
                    <div class="card-body">
                        <div class="tab">
                            <div class="form-group row justify-content-center">
                                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control form-control-md col-6", @placeholder = "Facility name", onfocus = "this.placeholder = ''", onblur = "this.placeholder = 'Facility name'" } })
                                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group row justify-content-center">
                                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control form-control-md col-6", @placeholder = "Email", onfocus = "this.placeholder = ''", onblur = "this.placeholder = 'Email'" } })
                                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group row justify-content-center">
                                @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control form-control-md col-6", @placeholder = "Phone", onfocus = "this.placeholder = ''", onblur = "this.placeholder = 'Phone'" } })
                                @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="tab">
                            <div class="form-group row justify-content-center">
                                @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control form-control-md col-6", @placeholder = "Street Address", onfocus = "this.placeholder = ''", onblur = "this.placeholder = 'Street address'" } })
                                @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group row justify-content-center">
                                @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control form-control-md col-6", @placeholder = "City", onfocus = "this.placeholder = ''", onblur = "this.placeholder = 'City'" } })
                                @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group row justify-content-center">
                                @Html.EditorFor(model => model.Province, new { htmlAttributes = new { @class = "form-control form-control-md col-6", @placeholder = "Province", onfocus = "this.placeholder = ''", onblur = "this.placeholder = 'Province'" } })
                                @Html.ValidationMessageFor(model => model.Province, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group row justify-content-center">
                                @Html.EditorFor(model => model.Country, new { htmlAttributes = new { @class = "form-control form-control-md col-6", @placeholder = "Country", onfocus = "this.placeholder = ''", onblur = "this.placeholder = 'Country'" } })
                                @Html.ValidationMessageFor(model => model.Country, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="tab">
                            <div class="form-group row justify-content-center">
                                @Html.EditorFor(model => model.StartTime, new { htmlAttributes = new { @class = "form-control form-control-md col-6", @placeholder = "Open Time", onfocus = "this.placeholder = ''", onblur = "this.placeholder = 'Open Time'" } })
                                @Html.ValidationMessageFor(model => model.StartTime, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group row justify-content-center">
                                @Html.EditorFor(model => model.EndTime, new { htmlAttributes = new { @class = "form-control form-control-md col-6", @placeholder = "Close Time", onfocus = "this.placeholder = ''", onblur = "this.placeholder = 'Close Time'" } })
                                @Html.ValidationMessageFor(model => model.EndTime, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group row justify-content-center">
                                @Html.EditorFor(model => model.HourlyRate, new { htmlAttributes = new { @class = "form-control form-control-md col-6", @placeholder = "Hourly Rate", onfocus = "this.placeholder = ''", onblur = "this.placeholder = 'Hourly Rate'" } })
                                @Html.ValidationMessageFor(model => model.HourlyRate, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <button type="button" class="btn btn-info" id="prevBtn" onclick="nextPrev(-1)">Previous</button>
                        <button type="button" class="btn btn-info" id="nextBtn" onclick="nextPrev(1)">Next</button>
                    </div>
                    <div class="card-footer text-muted">
                        <div style="text-align:center;margin-top:20px;">
                            <span class="step"></span> @*The number of spans in this div should equal the number of steps*@ 
                            <span class="step"></span>
                            @*<span class="step"></span>
                            <span class="step"></span>*@
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>


    @*<div class="tab">
        Name:
        <p><input placeholder="First name..." oninput="this.className = ''"></p>
        <p><input placeholder="Last name..." oninput="this.className = ''"></p>
    </div>

    <div class="tab">
        Contact Info:
        <p><input placeholder="E-mail..." oninput="this.className = ''"></p>
        <p><input placeholder="Phone..." oninput="this.className = ''"></p>
    </div>

    <div class="tab">
        Birthday:
        <p><input placeholder="dd" oninput="this.className = ''"></p>
        <p><input placeholder="mm" oninput="this.className = ''"></p>
        <p><input placeholder="yyyy" oninput="this.className = ''"></p>
    </div>

    <div class="tab">
        Login Info:
        <p><input placeholder="Username..." oninput="this.className = ''"></p>
        <p><input placeholder="Password..." oninput="this.className = ''"></p>
    </div>

    <div style="overflow:auto;">
        <div style="float:right;">
            <button type="button" id="prevBtn" onclick="nextPrev(-1)">Previous</button>
            <button type="button" id="nextBtn" onclick="nextPrev(1)">Next</button>
        </div>
    </div>*@

    <!-- Circles which indicates the steps of the form: -->
    @*<div style="text-align:center;margin-top:40px;">
        <span class="step"></span>
        <span class="step"></span>
        <span class="step"></span>
        <span class="step"></span>
    </div>*@

    <script type="text/javascript">
        var currentTab = 0; // Current tab is set to be the first tab (0)
        showTab(currentTab); // Display the current tab

        function showTab(n) {
            // This function will display the specified tab of the form ...
            var x = document.getElementsByClassName("tab");
            x[n].style.display = "block";
            // ... and fix the Previous/Next buttons:
            if (n == 0) {
                document.getElementById("prevBtn").style.display = "none";
            } else {
                document.getElementById("prevBtn").style.display = "inline";
            }
            if (n == (x.length - 1)) {
                document.getElementById("nextBtn").innerHTML = "Submit";
            } else {
                document.getElementById("nextBtn").innerHTML = "Next";
            }
            // ... and run a function that displays the correct step indicator:
            fixStepIndicator(n)
        }

        function nextPrev(n) {
            // This function will figure out which tab to display
            var x = document.getElementsByClassName("tab");
            // Exit the function if any field in the current tab is invalid:
           // if (n == 1 && !validateForm()) return false; //Comment out this line to disable validation
            // Hide the current tab:
            x[currentTab].style.display = "none";
            // Increase or decrease the current tab by 1:
            currentTab = currentTab + n;
            // if you have reached the end of the form... :
            if (currentTab >= x.length) {
                //...the form gets submitted:
                document.getElementById("postVenueForm").submit();
                return false;
            }
            // Otherwise, display the correct tab:
            showTab(currentTab);
        }

        function validateForm() {
            // This function deals with validation of the form fields
            var x, y, i, valid = true;
            x = document.getElementsByClassName("tab");
            y = x[currentTab].getElementsByTagName("input");
            // A loop that checks every input field in the current tab:
            for (i = 0; i < y.length; i++) {
                // If a field is empty...
                if (y[i].value == "") {
                    // add an "invalid" class to the field:
                    y[i].className += " invalid";
                    // and set the current valid status to false:
                    valid = false;
                }
            }
            // If the valid status is true, mark the step as finished and valid:
            if (valid) {
                document.getElementsByClassName("step")[currentTab].className += " finish";
            }
            return valid; // return the valid status
        }

        function fixStepIndicator(n) {
            // This function removes the "active" class of all steps...
            var i, x = document.getElementsByClassName("step");
            for (i = 0; i < x.length; i++) {
                x[i].className = x[i].className.replace(" active", "");
            }
            //... and adds the "active" class to the current step:
            x[n].className += " active";
        }

    </script>

    <style type="text/css">
        #regForm {
            background-color: #ffffff;
            margin: 100px auto;
            padding: 40px;
            width: 70%;
            min-width: 300px;
        }

        /* Style the input fields */
        input {
            padding: 10px;
            width: 100%;
            font-size: 17px;
            font-family: Raleway;
            border: 1px solid #aaaaaa;
        }

            /* Mark input boxes that gets an error on validation: */
            input.invalid {
                /*background-color: #ffdddd;*/
                border-color: crimson;
            }

        /* Hide all steps by default: */
        .tab {
            display: none;
        }

        /* Make circles that indicate the steps of the form: */
        .step {
            height: 15px;
            width: 15px;
            margin: 0 2px;
            background-color: #bbbbbb;
            border: none;
            border-radius: 50%;
            display: inline-block;
            opacity: 0.5;
        }

            /* Mark the active step: */
            .step.active {
                opacity: 1;
            }

            /* Mark the steps that are finished and valid: */
            .step.finish {
                background-color: #4CAF50;
            }
    </style>




}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
